// ** React Imports
import { memo, useState, useEffect, Fragment } from 'react';

// ** Hooks Imports
import { useUserService } from '@hooks/useUserService';
import { useTranslation } from 'react-i18next';

// ** Yup Imports
import * as yup from 'yup';
import { yupResolver } from '@hookform/resolvers/yup';
import { useForm, Controller } from 'react-hook-form';

// ** Shared Components Imports
import Notify from '@modules/shared/utils/Notify';
import DialogComponent from '@modules/shared/components/Dialog';

// ** Mui Imports
import {
  TextField,
  FormControl,
  Box,
  styled,
  Switch,
  FormHelperText,
  Alert,
  AlertTitle,
  Button,
  Chip,
} from '@mui/material';
import { LoadingButton } from '@mui/lab';
import MuiFormControlLabel, {
  FormControlLabelProps,
} from '@mui/material/FormControlLabel';


const FormControlLabel = styled(MuiFormControlLabel)<FormControlLabelProps>(
  ({ theme }) => ({
    marginBottom: theme.spacing(4),
    '& .MuiFormControlLabel-label': {
      fontSize: '0.875rem',
      color: theme.palette.text.secondary,
    },
  })
);

const schema = yup.object().shape({
  ip_allowed: yup.string().nullable(),
  callback_url: yup.string().nullable(),
  is_can_send: yup.boolean(),
  is_can_messages: yup.boolean(),
  is_can_gateways: yup.boolean(),
  is_can_logs: yup.boolean(),
});

interface IFormValues {
  ip_allowed: string;
  callback_url: string;
  is_can_send: boolean;
  is_can_messages: boolean;
  is_can_gateways: boolean;
  is_can_logs: boolean;
}

interface IProps {
  open: boolean;
  setOpen: (value: boolean) => void;
}

const CreateApiKeyDialog = (props: IProps) => {
  // ** Props
  const { open, setOpen } = props;

  // ** Hooks
  const { t } = useTranslation();
  const {
    dispatch,
    apiKeyCreate,
    apiKeyList,

    isApiKeyCreateLoading,
    isApiKeyCreateLoaded,
    isApiKeyCreateError,
    apiKey,

    resetApiKeyCreateState,
  } = useUserService();

  // ** State
  const [apiKeyString, setApiKeyString] = useState<string>('');

  const {
    control,
    reset,
    setError,
    handleSubmit,
    formState: { errors },
  } = useForm<IFormValues>({
    defaultValues: {
      ip_allowed: '',
      callback_url: '',
      is_can_send: true,
      is_can_messages: true,
      is_can_gateways: true,
      is_can_logs: true,
    },
    mode: 'onChange',
    resolver: yupResolver(schema),
  });

  const onSubmit = (data: IFormValues) => {
    // Create
    dispatch(apiKeyCreate(data));
  };

  // Events on UserService.createApiKey
  useEffect(() => {
    // isError
    if(isApiKeyCreateError) {
      dispatch(resetApiKeyCreateState());

      if(isApiKeyCreateError?.response?.data?.message){
        Notify('error', isApiKeyCreateError.response.data.message);
      } else {
        Object.entries(isApiKeyCreateError.response.data).forEach(
          ([key, value]) => {
            type keys = keyof IFormValues;
            setError(key as keys, {
              type: 'manual',
              message: value as string,
            });
          }
        );
      }
    }

    // isSuccess
    if (isApiKeyCreateLoaded) {
      // Notify('success', 'The API key successfully created!');
      dispatch(resetApiKeyCreateState());
      dispatch(apiKeyList());
      setApiKeyString(apiKey || '');
    }
  }, [dispatch, isApiKeyCreateError, isApiKeyCreateLoaded, apiKey]);

  return (
    <Fragment>
      <DialogComponent open={open} setOpen={setOpen} title={t(`Create API key`)} maxWidth='sm' content={
        apiKeyString ? 
        <>
          <Alert severity='success'>
            <AlertTitle>{t(`Success`)}</AlertTitle>
            {t(`Your key has been successfully created! Your key is available for copying only once, copy and save it right now!`)}
          </Alert>

          <Alert severity='warning' sx={{mt: 4}}>
            <AlertTitle>{t(`Warning`)}</AlertTitle>
            {t(`Do not disclose your API Key to anyone. You should treat your API Key like your passwords.
  It is recommended to restrict access to trusted IPs only to increase your account security.`)}
          </Alert>

          <Box sx={{mt: 8}}>
            <Chip label={apiKeyString} />
          </Box>

          <Button variant='outlined' sx={{ mt: 8 }} onClick={() => {
            navigator.clipboard.writeText(apiKeyString);
            Notify('success', t(`Copied to clibboard`));
          }}>
            {t(`Copy`)}
          </Button>
        </>
        :
        <form noValidate autoComplete='off' onSubmit={handleSubmit(onSubmit)}>

          {/* ip_allowed */}
          <FormControl fullWidth sx={{ mb: 6, mt: 2 }}>
            <Controller
              name='ip_allowed'
              control={control}
              rules={{ required: false }}
              render={({ field: { value, onChange } }) => (
                <TextField
                  value={value}
                  label={t(`IP Whitelist`)}
                  onChange={onChange}
                  error={Boolean(errors.ip_allowed)}
                  helperText={t(`IP whitelist separated by comma`)}
                  placeholder='11.22.33.44, 55.66.77.88'
                />
              )}
            />
            {errors.ip_allowed && (
              <FormHelperText sx={{ color: 'error.main' }}>
                {errors.ip_allowed.message}
              </FormHelperText>
            )}
          </FormControl>

          {/* callback_url */}
          <FormControl fullWidth sx={{ mb: 6, mt: 1 }}>
            <Controller
              name='callback_url'
              control={control}
              rules={{ required: false }}
              render={({ field: { value, onChange } }) => (
                <TextField
                  value={value}
                  label={t(`Callback URL`)}
                  placeholder='https://mydomain.com/callback'
                  onChange={onChange}
                  error={Boolean(errors.callback_url)}
                />
              )}
            />
            {errors.callback_url && (
              <FormHelperText sx={{ color: 'error.main' }}>
                {errors.callback_url.message}
              </FormHelperText>
            )}
          </FormControl>

          {/* is_can_send */}
          <FormControl fullWidth>
            <Controller
              name='is_can_send'
              control={control}
              rules={{ required: false }}
              render={({ field: { value, onBlur, onChange } }) => (
                <FormControlLabel
                  control={
                    <Switch
                      checked={value}
                      onChange={onChange}
                      color='success'
                    />
                  }
                  label={<span>{t(`Can Send SMS`)}</span>}
                />
              )}
            />
            {errors.is_can_send && (
              <FormHelperText sx={{ color: 'error.main', mb: 2 }}>
                {errors.is_can_send.message}
              </FormHelperText>
            )}
          </FormControl>

          {/* is_can_messages */}
          <FormControl fullWidth>
            <Controller
              name='is_can_messages'
              control={control}
              rules={{ required: false }}
              render={({ field: { value, onBlur, onChange } }) => (
                <FormControlLabel
                  control={
                    <Switch
                      checked={value}
                      onChange={onChange}
                      color='success'
                    />
                  }
                  label={<span>{t(`Can Fetch Messages`)}</span>}
                />
              )}
            />
            {errors.is_can_messages && (
              <FormHelperText sx={{ color: 'error.main', mb: 2 }}>
                {errors.is_can_messages.message}
              </FormHelperText>
            )}
          </FormControl>

          {/* is_can_gateways */}
          <FormControl fullWidth>
            <Controller
              name='is_can_gateways'
              control={control}
              rules={{ required: false }}
              render={({ field: { value, onBlur, onChange } }) => (
                <FormControlLabel
                  control={
                    <Switch
                      checked={value}
                      onChange={onChange}
                      color='success'
                    />
                  }
                  label={<span>{t(`Can Manage SMSC`)}</span>}
                />
              )}
            />
            {errors.is_can_gateways && (
              <FormHelperText sx={{ color: 'error.main', mb: 2 }}>
                {errors.is_can_gateways.message}
              </FormHelperText>
            )}
          </FormControl>

          {/* is_can_logs */}
          <FormControl fullWidth>
            <Controller
              name='is_can_logs'
              control={control}
              rules={{ required: false }}
              render={({ field: { value, onBlur, onChange } }) => (
                <FormControlLabel
                  control={
                    <Switch
                      checked={value}
                      onChange={onChange}
                      color='success'
                    />
                  }
                  label={<span>{t(`Can Fetch SMPP-Logs`)}</span>}
                />
              )}
            />
            {errors.is_can_logs && (
              <FormHelperText sx={{ color: 'error.main', mb: 2 }}>
                {errors.is_can_logs.message}
              </FormHelperText>
            )}
          </FormControl>

          <Box
            sx={{
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'space-between',
            }}
          >
            <LoadingButton
              fullWidth={true}
              loading={isApiKeyCreateLoading}
              type='submit'
              variant='contained'
            >
              {t(`Create`)}
            </LoadingButton>
          </Box>
        </form>
      } />
    </Fragment>
  );
};

export default memo(CreateApiKeyDialog);
